---
- name: Deploy Spring PetClinic
  hosts: production
  become: yes
  vars:
    app_name: spring-petclinic
    container_name: spring-petclinic
    container_port: 8080
    host_port: 80
    
  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes
      ignore_errors: yes
    
    - name: Check if container already exists
      shell: docker ps -a | grep spring-petclinic || echo "not found"
      register: container_exists
      changed_when: false
      ignore_errors: yes
    
    - name: Stop existing Spring PetClinic container
      shell: docker stop spring-petclinic && docker rm spring-petclinic
      when: "'not found' not in container_exists.stdout"
      ignore_errors: yes
    
    - name: Create temporary directory for Docker image transfer
      file:
        path: /tmp/petclinic-transfer
        state: directory
        mode: '0755'
    
    - name: Save Docker image
      shell: docker save spring-petclinic:{{ build_number }} -o /tmp/petclinic-image.tar
      delegate_to: localhost
    
    - name: Copy Docker image to remote
      copy:
        src: /tmp/petclinic-image.tar
        dest: /tmp/petclinic-transfer/petclinic-image.tar
    
    - name: Load Docker image on remote
      shell: docker load -i /tmp/petclinic-transfer/petclinic-image.tar
    
    - name: Start Spring PetClinic container
      shell: >
        docker run -d --name spring-petclinic -p {{ host_port }}:{{ container_port }}
        spring-petclinic:{{ build_number }}
    
    - name: Clean up temporary files
      file:
        path: /tmp/petclinic-transfer
        state: absent      
    - name: Verify container is running
      shell: docker ps | grep spring-petclinic
      register: container_check
      ignore_errors: yes
    
    - name: Container status
      debug:
        msg: "Container state: {{ 'running' if container_check.rc == 0 else 'not running' }}"
        
    # Install Node Exporter for server monitoring
    - name: Check if node-exporter container exists
      shell: docker ps -a | grep node-exporter || echo "not found"
      register: exporter_exists
      changed_when: false
      
    - name: Remove existing node-exporter container
      shell: docker stop node-exporter && docker rm node-exporter
      when: "'not found' not in exporter_exists.stdout"
      ignore_errors: yes
      
    - name: Start node-exporter container
      shell: >
        docker run -d --name node-exporter -p 9100:9100
        --restart always prom/node-exporter:latest